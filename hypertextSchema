Content-Type: application/json; schema="#"
{
	"extends": {"href":"http://json-schema.org/schema"},
	"description": "A schema for schemas that define how hypertext information is interpreted from instance objects",
	"schema": {"href":"#"},
	"hrefProperty":"href",
	"properties":{
		"hrefProperty":{
			"type":"string",
			"description":"This defines the name of the property that indicates a hyperlink. When this property is encountered in the instance object or any of it's child objects, the value of the property indicates target URI of the hyperlink and is resolved per RFC 1808. The object may include other properties providing a partial/summary representation of the target resource",
			"optional":true,
			"default":"href"
		}
		"locatorProperty":{
			"type":"string",
			"description":"This defines the name of the property that indicates the location of the object. When this property is encountered in the instance object or any of it's child objects, the object represents a resource, whose URI is indicated by the value of the property and is resolved per RFC 1808. The object is treated as a full representation of the target resource",
			"optional":true,
			"default":"id"
		},
		"data":{
			"type":"array",
			"description":"This should refer to the collection of instances of this defined schema"
		},
		"baseUrl":{
			"type":"string",
			"description":"This defines the base URL to be used for resolving hyperlinks and locator property values. When this property is not present, the URL that was used to retrieve the representation of resource is used",
			"optional":true
		},
		"envelopeFor":{
			"type":"string",
			"description":"This presence of this property indicates that the instance object is an envelope for the real representation of the resource. This defines the name of property that refers to the actual data of the real representation. All other properties of the instance object are considered metadata"
			"optional": true,
			"default": "data"
		},
		"queryEncoding":{
			"type":"string",
			"description":"This property indicates the query encoding format that should be used for querying the collection of instances",
			"options":[
				{"name":"Form URL Encoded", "value": "application/x-www-form-urlencoded"},
				{"name":"JSONQuery URL Encoded", "value": "application/x-jsonquery-urlencoded"}
			],
			"optional": true,
			"default": "application/x-www-form-urlencoded"
		},
		"versionProperty":
			"type":"string",
			"description":"This property indicates the version of the instance. Any modification to the instance must cause a change in the version value",
			"optional": true
		}
	}
}

restSchema
Content-Type: application/json; schema="http://json-schema.org/hyper-schema"
{
	"description": "A schema for providing RESTful metadata of resources",
	"schema": {"href":"http://json-schema.org/hyper-schema"},
	"hrefProperty": "href",
	"envelopeFor": "members",
	"properties":{
		"version":{
			"description":"identifies this version of the collection"
		},
		"type":{
			"description":"the media type of the members of this collection"
		}
	},
	"items":{
		"envelopeFor": "value",
		"properties":{
			"precis":{
				"description":"A summary of the item"
			}
		}
	}
}
	


Kris Zyp wrote:
> Another thought, one could also approach the data-schema relationship
> from the other direction. That is, a user could access a schema first,
> and then access the data (instances of that schema) as a link from the
> schema, where the link relationship is "data" or "collection" . That is
> a schema could have:
>
> {
>	 "data":{"href":"/Project/"} # points to the collection of instances of this schema
>	 "metadata": {
>		 ...
>	 },
>	 "properties":{
>		 ...
>	 },
>
> }
> This could easily be added to the schema since it is well-defined
> structure. One could even define the forward and reverse relationship in
> the schema:
>
> {
>	 "data":{"href":"/Project/", "schema":{"href":"#"}},
>	...
>
> The advantage of this you wouldn't need to rely MIME-type parameters. However, referencing data instances from the schema and schemas from the data don't necessarily need to be mutually exclusive, and if data relies on a schema, not having a link may be an REST anti-pattern since it would prevent intelligible bookmarkability of data resources. 
>
> From a hypertext navigation perspective, starting with a list of schemas as an entry point to JSON-based site makes a lot of sense, it allows users to see the structure and descriptions of the available data and then drill down into the actual data instances from there.
> Kris
>
> Kris Zyp wrote:
>> I wanted to propose another possible approach for defining a JSON
>> structure for RESTful interaction. I have previously suggested the
>> importance of unobtrusively allowing JSON to preserve to it's natural
>> structure within a RESTful architecture; alternate JSON media sub-types
>> and structures should certainly be usable within a JSON-base REST
>> architecture, as alternate media-types are a core aspect of REST. At the
>> same time, others have expressed the desire to be able to include
>> resource metadata within JSON data structures. Perhaps the best approach
>> would be rather than enforcing a certain structure for resource
>> metadata, allow JSON representations to define their own structure or
>> schema and ascribe their own meaning for the hierarchy of their
>> structure. A JSON Schema [1] definition of data could be used (which
>> also provides definitions of allowable data types, very useful for
>> modifying data) and augmented with resource metadata types that could be
>> assigned to different properties. Additionally, this would permit
>> servers to define their own properties to use for hyperlinks and
>> resource identification. I believe it is one of our goals that we should
>> make it easy as possible for existing implementations to become
>> interoperable without forcing them to create their own backwards
>> incompatibility issues. Essentially this approach would mean they we
>> would be creating a meta-specification for defining how to specify
>> RESTful JSON.
>>
>> There are several advantages to this approach:
>> 1. Maintain unobtrusive natural JSON representations. Servers can
>> describe the structure and meaning of their JSON in terms of how it maps
>> to REST concepts (URLs, content types, etc.), rather than being forced
>> to follow a certain structure. Virtually any JSON structure that
>> contains RESTful information can be understood by clients with modifying
>> the structure. Existing implementations can conform by providing a
>> schema (and pointing to it in the MIME parameter) without any
>> modification of their outputted data.
>> 2. We can include metadata within JSON representations without needing
>> separate content types
>> 3. JSON Schemas on their own are an invaluable resource for user agents
>> that may be modifying resources based on JSON representations. Schemas
>> can be used to user agents to understand what are valid values for
>> different properties and properly constrain and guide the user in
>> updating data. A schema can be central resource for guiding the user
>> agent in both property constraints as well understanding the REST
>> mappings of the properties.
>>
>> The main disadvantage is that it increases the complexity of user
>> agents, and what they must understand (they can't hardcode the property
>> names for references/links for example).
>>
>> There are a number of ways that one could specify the applicable schema
>> for a JSON representation, but like I had suggested with the "locator"
>> property, I believe a MIME type parameter is most appropriate since it
>> does not impose on the representation format. For example, an object
>> representation could look like:
>>
>> GET /Project/proposal
>>
>> Content-Type: application/project+json; schema="/projectSchema"
>> {
>>	// metadata:
>>	"type": "application/project+json",
>>	"href": "proposal",
>>	"id": "proposal",
>>	 // data:
>>	"data": {
>>		"projectOwner": {
>>		 // metadata:
>>			"href": "/Person/kris",
>>			"id":"kris",
>>		 // data:
>>			"name":"Kris Zyp"
>>		}
>>	}
>> }
>>
>> And we could define a schema:
>> Content-Type: application/schema+json;
>> schema="http://json-schema.org/schema"
>> {
>>	 "metadata": { # mappings of our properties to REST metadata
>>		 "contentTypeProperty":"type",
>>		 "hrefProperty":"href"
>>	 },
>>	 "envelopeFor": "data", # indicating that the value of the data is
>> the real representation
>>	 "properties":{
>>		 "projectOwner":{	# schema for projectOwner values
>>				"properties:"{
>>					 "name":{"type":"string"} # this is a JSON Schema
>> property constraint (value must be a string)
>>				}
>>		 }
>>	 }
>> }
>>
>> This schema provides all the information necessary for a user agent to
>> understand the properties of the instance (/Project/proposal).
>>
>> An example of a collection:
>> GET /Project/
>> Content-Type: application/myapp+json; schema="/projectCollectionSchema"
>> {
>>	"lastModified":"some date",
>>	"members":[
>>		{
>>			// metadata:
>>		 "type": "application/project+json",
>>		 "href": "proposal",
>>			"id": "proposal",
>>			....
>>		
>>	]
>> }
>>
>> And a schema for the collection:
>> GET /projectCollectionSchema
>> Content-Type: application/schema+json;
>> schema="http://json-schema.org/schema"
>> {
>>	 "metadata": { # mappings of our properties to REST metadata
>>		 "lastModifiedProperty":"lastModified"
>>	 },
>>	 "envelopeFor": "members", # indicating that the value of the members
>> is the "real" representation
>>	 "items":{ # definition of the items in the array/collection
>>		 # hyperlink to the schema for each project object
>>		 # using the hyperlink property defined at
>> http://json-schema.org/schema
>>		 "$ref":"projectSchema"
>>	 }
>> }
>>
>> Additional definitions that could be provided in the schema (and not
>> shown in these examples) could be differenting between a URL property
>> that does provide a full object representation (locator) vs one that
>> points to another location to retrieve the data (href), and perhaps
>> includes a partial/summary representation. Also, a baseUrl could be
>> defined for subobjects to support leveraging existing identifier
>> properties in more complex URL schemes (like those used by Rails).
>>
>> Thanks,
>> Kris
>>
>> [1] http://json-schema.org and http://groups.google.com/group/json-schema
>>
>>
>>	
